{"version":3,"sources":["chartist-plugin-columntooltips.js"],"names":["root","factory","define","amd","exports","module","this","window","document","Chartist","defaultOptions","classNames","line","lineGroup","column","columnGroup","point","pointGroup","pointGroups","tooltip","cloud","showLine","showPointsOnHover","plugins","ctColumnTooltips","options","extend","chart","renderTooltip","$tooltip","createElement","$cloud","$list","classList","add","i","data","series","length","$listItem","appendChild","$chart","on","event","selector","callback","addEventListener","e","target","contains","renderColumns","step","getStep","points","renderPoints","lines","renderLines","columnSet","renderHoverColumns","divider","labels","fullWidth","chartRect","width","svg","elem","addClass","g","push","oldPoints","j","renderPoint","group","oldPoint","positions","x1","_node","baseVal","value","x2","y1","y2","remove","xPos","axisX","columns","attr","index","stroke-width","updateTooltipValues","$listItems","querySelectorAll","textContent","showTooltip","posX","style","left","visible","hideLine","showPoints","hidePoints","preparePointData","container","querySelector","getAttribute","attributes","showPoint","type","seriesIndex","element","console","warn"],"mappings":";;;;;;CAAC,SAAUA,EAAMC,GACO,kBAAXC,SAAyBA,OAAOC,IAEzCD,UAAW,WACT,MAAQF,GAAK,qCAAuCC,MAE1B,gBAAZG,SAIhBC,OAAOD,QAAUH,IAEjBD,EAAK,qCAAuCC,KAE9CK,KAAM,WA0YR,MAhYC,UAASC,EAAQC,EAAUC,GAC1B,YAEA,IAAIC,IAMFC,YAEEC,KAAM,UAGNC,UAAW,WAGXC,OAAQ,YAGRC,YAAa,aAGbC,MAAO,kBAGPC,WAAY,wBAGZC,YAAa,yBAGbC,QAAS,oBAGTC,MAAO,YAQTC,UAAU,EAOVC,mBAAmB,EAGrBb,GAASc,QAAUd,EAASc,YAE5Bd,EAASc,QAAQC,iBAAmB,SAASC,GAI3C,MAFAA,GAAUhB,EAASiB,UAAWhB,EAAgBe,GAEvC,SAA0BE,GAuB/B,QAASC,KACP,GAAIC,GAAWrB,EAASsB,cAAc,OAClCC,EAASvB,EAASsB,cAAc,OAChCE,EAAQxB,EAASsB,cAAc,KAEnCD,GAASI,UAAUC,IAAIT,EAAQd,WAAWQ,SAC1CY,EAAOE,UAAUC,IAAIT,EAAQd,WAAWS,MAExC,KAAK,GAAIe,GAAI,EAAGA,EAAIR,EAAMS,KAAKC,OAAOC,OAAQH,IAAK,CACjD,GAAII,GAAY/B,EAASsB,cAAc,KACvCE,GAAMQ,YAAYD,GAMpB,MAJAR,GAAOS,YAAYR,GACnBH,EAASW,YAAYT,GACrBU,EAAOD,YAAYX,GAEZA,EAgBT,QAASa,GAAGC,EAAOC,EAAUC,GAC3BJ,EAAOK,iBAAiBH,EAAO,SAASI,GACjCH,IAAYG,EAAEC,OAAOf,UAAUgB,SAASL,IAC3CC,EAASE,KAQf,QAASG,GAAcH,GACrB,GAAII,GAAOC,EAAQL,EAEftB,GAAQH,oBACVK,EAAMH,iBAAiB6B,OAASC,EAAaP,EAAGI,IAG9C1B,EAAQJ,WACVM,EAAMH,iBAAiB+B,MAAQC,EAAYT,EAAGI,IAGhDxB,EAAMH,iBAAiBiC,UAAYC,EAAmBX,EAAGI,GAQ3D,QAASC,GAAQL,GACf,GAAIY,GAAUhC,EAAMS,KAAKwB,OAAOtB,OAASX,EAAMF,QAAQoC,SACvD,OAAOd,GAAEe,UAAUC,QAAUJ,EAQ/B,QAASL,GAAaP,EAAGI,GACvB,GAAIE,GAAS1B,EAAMqC,IAAIC,KAAK,KAAKC,SAASzC,EAAQd,WAAWO,YAC7DmC,GAAOA,SAEP,KAAK,GAAIc,GAAI,EAAGA,EAAIxC,EAAMS,KAAKwB,OAAOtB,OAAQ6B,IAAK,CACjD,GAAIlD,GAAaoC,EAAOY,KAAK,KAAKC,SAASzC,EAAQd,WAAWM,WAC9DoC,GAAOA,OAAOe,KAAKnD,GAGrB,IAAK,GAAIkB,GAAI,EAAGA,EAAIR,EAAMH,iBAAiB6C,UAAU/B,OAAQH,IAC3D,IAAK,GAAImC,GAAI,EAAGA,EAAI3C,EAAMH,iBAAiB6C,UAAUlC,GAAGG,OAAQgC,IAC9DC,EAAYlB,EAAQlB,EAAGmC,EAI3B,OAAOjB,GAST,QAASkB,GAAYlB,EAAQlB,EAAGmC,GAC9B,GAAIE,GAAQnB,EAAOA,OAAOiB,GACtBtD,EAAQwD,EAAMP,KAAK,KAAKC,SAASzC,EAAQd,WAAWK,OACpDyD,EAAW9C,EAAMH,iBAAiB6C,UAAUlC,GAAGmC,GAC/CI,GACFC,GAAIF,EAASG,MAAMD,GAAGE,QAAQC,MAC9BC,GAAIN,EAASG,MAAMG,GAAGF,QAAQC,MAC9BE,GAAIP,EAASG,MAAMI,GAAGH,QAAQC,MAC9BG,GAAIR,EAASG,MAAMK,GAAGJ,QAAQC,MAEhC9D,GAAMiD,KAAK,OAAQS,EAAW,0BAC9B1D,EAAMiD,KAAK,OAAQS,EAAW,wBAC9BD,EAASS,SASX,QAAS1B,GAAYT,EAAGI,GACtB,GAAII,GAAQ5B,EAAMqC,IAAIC,KAAK,KAAKC,SAASzC,EAAQd,WAAWE,UAC5D0C,GAAMA,QAEN,KAAK,GAAIpB,GAAI,EAAGA,EAAIR,EAAMS,KAAKwB,OAAOtB,OAAQH,IAAK,CACjD,GAAIgD,GAAOhC,EAAOhB,EAAIY,EAAEqC,MAAMtB,UAAUa,GACpCD,GACFC,GAAIQ,EACJJ,GAAII,EACJH,GAAIjC,EAAEe,UAAUkB,GAChBC,GAAIlC,EAAEe,UAAUmB,IAEdrE,EAAO2C,EAAMU,KAAK,OAAQS,EAAWjD,EAAQd,WAAWC,KAC5D2C,GAAMA,MAAMa,KAAKxD,GAGnB,MAAO2C,GAST,QAASG,GAAmBX,EAAGI,GAC7B,GAAIkC,GAAU1D,EAAMqC,IAAIC,KAAK,KAAKC,SAASzC,EAAQd,WAAWI,YAC9DsE,GAAQA,UAER,KAAK,GAAIlD,GAAI,EAAGA,EAAIR,EAAMS,KAAKwB,OAAOtB,OAAQH,IAAK,CACjD,GAAIgD,GAAOhC,EAAOhB,EAAIY,EAAEqC,MAAMtB,UAAUa,GACpCD,GACFC,GAAIQ,EACJJ,GAAII,EACJH,GAAIjC,EAAEe,UAAUkB,GAChBC,GAAIlC,EAAEe,UAAUmB,IAEdnE,EAASuE,EAAQpB,KAAK,OAAQS,EAAWjD,EAAQd,WAAWG,QAAQwE,MACtEC,MAASpD,EACTqD,eAAgBrC,EAAO,MAEzBkC,GAAQA,QAAQjB,KAAKtD,GAGvB,MAAOuE,GAQT,QAASI,GAAoB5D,EAAU0D,GAErC,IAAK,GADDG,GAAa7D,EAAS8D,iBAAiB,SAClCxD,EAAI,EAAGA,EAAIR,EAAMS,KAAKC,OAAOC,OAAQH,IAC5CuD,EAAWvD,GAAGyD,YAAcjE,EAAMS,KAAKC,OAAOF,GAAGoD,GASrD,QAASM,GAAYhE,EAAUiE,GAC7BjE,EAASkE,MAAMC,KAAOF,EAAO,KAC7BjE,EAASI,UAAUC,IAAI,WAEnB4D,EAAOnE,EAAMH,iBAAiBiC,UAAUM,QAAU,EACpDlC,EAASI,UAAUC,IAAI,eAEvBL,EAASI,UAAUiD,OAAO,eAQ9B,QAAS7D,GAASkE,GAChB5D,EAAMH,iBAAiB+B,MAAMA,MAAMgC,GAAOD,MACxCW,SAAW,IAQf,QAASC,GAASX,GAChB5D,EAAMH,iBAAiB+B,MAAMA,MAAMgC,GAAOD,MACxCW,SAAW,IAQf,QAASE,GAAWZ,GAClB5D,EAAMH,iBAAiB6B,OAAOA,OAAOkC,GAAOD,MAC1CW,SAAW,IAQf,QAASG,GAAWb,GAClB5D,EAAMH,iBAAiB6B,OAAOA,OAAOkC,GAAOD,MAC1CW,SAAW,IAOf,QAASI,KACP1E,EAAMH,iBAAiB6C,YACvB,KAAK,GAAIlC,GAAI,EAAGA,EAAIR,EAAMS,KAAKC,OAAOC,OAAQH,IAC5CR,EAAMH,iBAAiB6C,UAAUlC,MAlQrC,GAAIM,GAASd,EAAM2E,UAGfzE,EAAWY,EAAO8D,cAAc,IAAM9E,EAAQd,WAAWQ,QAM7DQ,GAAMH,oBAGDK,IACHA,EAAWD,KA2Pbc,EAAG,YAAajB,EAAQd,WAAWG,OAAQ,SAASiC,GAElD,GAAIwC,GAAQxC,EAAEC,OAAOwD,aAAa,QAElCf,GAAoB5D,EAAU0D,GAC9BM,EAAYhE,EAAUkB,EAAEC,OAAOyD,WAAW9B,GAAGG,OAEzCrD,EAAQJ,UACVA,EAASkE,GAGP9D,EAAQH,mBACV6E,EAAWZ,KAIf7C,EAAG,WAAYjB,EAAQd,WAAWG,OAAQ,SAASiC,GAEjD,GAAIwC,GAAQxC,EAAEC,OAAOwD,aAAa,QAElC3E,GAASI,UAAUiD,OAAO,WAEtBzD,EAAQJ,UACV6E,EAASX,GAGP9D,EAAQH,mBACV8E,EAAWb,KAIX9D,EAAQH,oBACNK,EAAMF,QAAQiF,WAChBL,IAEA1E,EAAMe,GAAG,OAAQ,SAASK,GACT,UAAXA,EAAE4D,OACJhF,EAAMH,iBAAiB6C,UAAUtB,EAAE6D,aAAa7D,EAAEwC,OAASxC,EAAE8D,aAIjEpF,EAAQH,mBAAoB,EAC5BwF,QAAQC,KAAK,2EAIjBpF,EAAMe,GAAG,UAAW,SAASK,GAC3BG,EAAcH,KAGhBpB,EAAMe,GAAG,SAAU,SAASK,GAC1BG,EAAcH,QAKpBxC,OAAQC,SAAUC,UAEbA,SAASc,QAAQC","file":"chartist-plugin-columntooltips.min.js","sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module unless amdModuleId is set\n    define([], function () {\n      return (root['Chartist.plugins.ctColumnTooltips'] = factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    root['Chartist.plugins.ctColumnTooltips'] = factory();\n  }\n}(this, function () {\n\n/**\n * Chartist.js plugin to display x-axis culumn's summary tooltip\n * @author THE STORY <tell@thestory.pl>\n * @license MIT\n * @version 1.0.0\n */\n\n/* global Chartist */\n(function(window, document, Chartist) {\n  'use strict';\n\n  var defaultOptions = {\n\n    /**\n     * Class names used by the plugin\n     * @type {Object}\n     */\n    classNames: {\n      /** Decoration line */\n      line: 'ct-line',\n\n      /** Decoration line group*/\n      lineGroup: 'ct-lines',\n\n      /** Hover column */\n      column: 'ct-column',\n\n      /** Hover column group */\n      columnGroup: 'ct-columns',\n\n      /** Hover column point */\n      point: 'ct-custom-point',\n\n      /** Hover column point group */\n      pointGroup: 'ct-column-point-group',\n\n      /** Hover column point groups */\n      pointGroups: 'ct-column-point-groups',\n\n      /** Tooltip */\n      tooltip: 'ct-column-tooltip',\n\n      /** Tooltip cloud */\n      cloud: 'ct-cloud',\n    },\n\n    /**\n     * Show decorative line on column hover\n     * @type {Boolean}\n     * @defaultvalue\n     */\n    showLine: true,\n\n    /**\n     * Show points on column hover - needs showPoint option to be true\n     * @type {Boolean}\n     * @defaultvalue\n     */\n    showPointsOnHover: true,\n  };\n\n  Chartist.plugins = Chartist.plugins || {};\n\n  Chartist.plugins.ctColumnTooltips = function(options) {\n\n    options = Chartist.extend({}, defaultOptions, options);\n\n    return function ctColumnTooltips(chart) {\n\n      /** @type {HTMLElement} Chart DOM object */\n      var $chart = chart.container;\n\n      /** @type {HTMLElement} Tooltip DOM object */\n      var $tooltip = $chart.querySelector('.' + options.classNames.tooltip);\n\n      /**\n       * Alias to plugins objects container\n       * @type {Object}\n       */\n      chart.ctColumnTooltips = {};\n\n      // Create tooltip is there isn't any\n      if (!$tooltip) {\n        $tooltip = renderTooltip();\n      }\n\n      /**\n       * Generates a tooltip\n       * @return {HTMLElement} Tooltip DOM object\n       */\n      function renderTooltip() {\n        var $tooltip = document.createElement('div');\n        var $cloud = document.createElement('div');\n        var $list = document.createElement('ul');\n\n        $tooltip.classList.add(options.classNames.tooltip);\n        $cloud.classList.add(options.classNames.cloud);\n\n        for (var i = 0; i < chart.data.series.length; i++) {\n          var $listItem = document.createElement('li');\n          $list.appendChild($listItem);\n        }\n        $cloud.appendChild($list);\n        $tooltip.appendChild($cloud);\n        $chart.appendChild($tooltip);\n\n        return $tooltip;\n      }\n\n      /**\n       * Callback that handles the events\n       *\n       * @callback eventCallback\n       * @param {Object} e Event object\n       */\n\n      /**\n       * Sets event on charts certain children\n       * @param {string}   event    Event name\n       * @param {string}   selector Target elemnt's class\n       * @param {eventCallback} callback The calllback that handles the event\n       */\n      function on(event, selector, callback) {\n        $chart.addEventListener(event, function(e) {\n          if (!selector || e.target.classList.contains(selector))\n            callback(e);\n        });\n      }\n\n      /**\n       * Renders hover colums and their decorations\n       * @param {Object} e   Event object\n       */\n      function renderColumns(e) {\n        var step = getStep(e);\n\n        if (options.showPointsOnHover) {\n          chart.ctColumnTooltips.points = renderPoints(e, step);\n        }\n\n        if (options.showLine) {\n          chart.ctColumnTooltips.lines = renderLines(e, step);\n        }\n\n        chart.ctColumnTooltips.columnSet = renderHoverColumns(e, step);\n      }\n\n      /**\n       * Get the x-axis distance between set points\n       * @param   {Object} e Event\n       * @return  {number}   Distance between set points\n       */\n      function getStep(e) {\n        var divider = chart.data.labels.length - chart.options.fullWidth;\n        return e.chartRect.width() / divider;\n      }\n\n      /**\n       * Generates points that will activate on column hover\n       * @param   {Object} e Event object\n       * @return  {Object}   SVG point group\n       */\n      function renderPoints(e, step) {\n        var points = chart.svg.elem('g').addClass(options.classNames.pointGroups);\n        points.points = [];\n\n        for (var g = 0; g < chart.data.labels.length; g++) {\n          var pointGroup = points.elem('g').addClass(options.classNames.pointGroup);\n          points.points.push(pointGroup);\n        }\n\n        for (var i = 0; i < chart.ctColumnTooltips.oldPoints.length; i++) {\n          for (var j = 0; j < chart.ctColumnTooltips.oldPoints[i].length; j++) {\n            renderPoint(points, i, j);\n          }\n        }\n\n        return points;\n      }\n\n      /**\n       * Generates column point\n       * @param  {Object} points [description]\n       * @param  {number} i      [description]\n       * @param  {number} j      [description]\n       */\n      function renderPoint(points, i, j) {\n        var group = points.points[j];\n        var point = group.elem('g').addClass(options.classNames.point);\n        var oldPoint = chart.ctColumnTooltips.oldPoints[i][j];\n        var positions = {\n          x1: oldPoint._node.x1.baseVal.value,\n          x2: oldPoint._node.x2.baseVal.value,\n          y1: oldPoint._node.y1.baseVal.value,\n          y2: oldPoint._node.y2.baseVal.value\n        };\n        point.elem('line', positions, 'ct-custom-point-shadow');\n        point.elem('line', positions, 'ct-custom-point-fill');\n        oldPoint.remove();\n      }\n\n      /**\n       * Draws lines for column decoration\n       * @param   {Object} e     Event object\n       * @param   {number} step Distance between lines\n       * @return  {Object}       SVG lines group\n       */\n      function renderLines(e, step) {\n        var lines = chart.svg.elem('g').addClass(options.classNames.lineGroup);\n        lines.lines = [];\n\n        for (var i = 0; i < chart.data.labels.length; i++) {\n          var xPos = step * i + e.axisX.chartRect.x1;\n          var positions = {\n            x1: xPos,\n            x2: xPos,\n            y1: e.chartRect.y1,\n            y2: e.chartRect.y2\n          };\n          var line = lines.elem('line', positions, options.classNames.line);\n          lines.lines.push(line);\n        }\n\n        return lines;\n      }\n\n      /**\n       * Draws opaque columns used to call hover event\n       * @param   {Object} e     Event object\n       * @param   {number} step Distance between column centers\n       * @return  {Object}       SVG hover column group (\"<g>\")\n       */\n      function renderHoverColumns(e, step) {\n        var columns = chart.svg.elem('g').addClass(options.classNames.columnGroup);\n        columns.columns = [];\n\n        for (var i = 0; i < chart.data.labels.length; i++) {\n          var xPos = step * i + e.axisX.chartRect.x1;\n          var positions = {\n            x1: xPos,\n            x2: xPos,\n            y1: e.chartRect.y1,\n            y2: e.chartRect.y2\n          };\n          var column = columns.elem('line', positions, options.classNames.column).attr({\n            'index': i,\n            'stroke-width': step + 'px',\n          });\n          columns.columns.push(column);\n        }\n\n        return columns;\n      }\n\n      /**\n       * Updates tooltip values with correspoinding column point values\n       * @param {HTMLElement} $tooltip Tooltip item\n       * @param {number} Index Column index\n       */\n      function updateTooltipValues($tooltip, index) {\n        var $listItems = $tooltip.querySelectorAll('ul li');\n        for (var i = 0; i < chart.data.series.length; i++) {\n          $listItems[i].textContent = chart.data.series[i][index];\n        }\n      }\n\n      /**\n       * Shows tooltip\n       * @param {HTMLElement} $tooltip Tooltip DOM element\n       * @param {number} posX Tooltip position\n       */\n      function showTooltip($tooltip, posX) {\n        $tooltip.style.left = posX + 'px';\n        $tooltip.classList.add('visible');\n\n        if (posX > chart.ctColumnTooltips.columnSet.width() / 2) {\n          $tooltip.classList.add('switch-side');\n        } else {\n          $tooltip.classList.remove('switch-side');\n        }\n      }\n\n      /**\n       * Shows decoration line on certain column index\n       * @param {number} index Index of the colum where the line is located\n       */\n      function showLine(index) {\n        chart.ctColumnTooltips.lines.lines[index].attr({\n          'visible': true\n        });\n      }\n\n      /**\n       * Hides the certain column's decoration line\n       * @param {number} index Index of the colum where the line is located\n       */\n      function hideLine(index) {\n        chart.ctColumnTooltips.lines.lines[index].attr({\n          'visible': false\n        });\n      }\n\n      /**\n       * Shows points on certain column index\n       * @param {number} index Index of the colum where the points are located\n       */\n      function showPoints(index) {\n        chart.ctColumnTooltips.points.points[index].attr({\n          'visible': true\n        });\n      }\n\n      /**\n       * Hides column points\n       * @param {index} index Column index where the points are located\n       */\n      function hidePoints(index) {\n        chart.ctColumnTooltips.points.points[index].attr({\n          'visible': false\n        });\n      }\n\n      /**\n       * Prepairs empty array for points\n       */\n      function preparePointData() {\n        chart.ctColumnTooltips.oldPoints = [];\n        for (var i = 0; i < chart.data.series.length; i++) {\n          chart.ctColumnTooltips.oldPoints[i] = [];\n        }\n      }\n\n      // Events\n\n      on('mouseover', options.classNames.column, function(e) {\n        /** @type {number} Hovered column's index */\n        var index = e.target.getAttribute('index');\n\n        updateTooltipValues($tooltip, index);\n        showTooltip($tooltip, e.target.attributes.x1.value);\n\n        if (options.showLine) {\n          showLine(index);\n        }\n\n        if (options.showPointsOnHover) {\n          showPoints(index);\n        }\n      });\n\n      on('mouseout', options.classNames.column, function(e) {\n        /** @type {number} Hovered column's index */\n        var index = e.target.getAttribute('index');\n\n        $tooltip.classList.remove('visible');\n\n        if (options.showLine) {\n          hideLine(index);\n        }\n\n        if (options.showPointsOnHover) {\n          hidePoints(index);\n        }\n      });\n\n      if (options.showPointsOnHover) {\n        if (chart.options.showPoint) {\n          preparePointData();\n\n          chart.on('draw', function(e) {\n            if (e.type === 'point') {\n              chart.ctColumnTooltips.oldPoints[e.seriesIndex][e.index] = e.element;\n            }\n          });\n        } else {\n          options.showPointsOnHover = false;\n          console.warn(\"Chart's option 'showPoint' must be enabled touse hover points feature\");\n        }\n      }\n\n      chart.on('created', function(e) {\n        renderColumns(e);\n      });\n\n      chart.on('update', function(e) {\n        renderColumns(e);\n      });\n    };\n  };\n\n}(window, document, Chartist));\n\nreturn Chartist.plugins.ctColumnTooltips;\n\n}));\n"]}